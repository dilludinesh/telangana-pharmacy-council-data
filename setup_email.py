#!/usr/bin/env python3
"""Interactive helper to configure email notifications for rxsync."""

from __future__ import annotations

import getpass
import os
from pathlib import Path
from typing import Dict

ENV_FILE = Path(".env")
ENV_TEMPLATE_KEYS = {
    "RXSYNC_EMAIL_TO": "Recipient email address",
    "RXSYNC_EMAIL_FROM": "Sender email address",
    "RXSYNC_SMTP_SERVER": "SMTP server hostname",
    "RXSYNC_SMTP_PORT": "SMTP server port",
    "RXSYNC_SMTP_USERNAME": "SMTP username",
    "RXSYNC_SMTP_PASSWORD": "SMTP password",
    "RXSYNC_EMAIL_SUBJECT": "Email subject prefix (optional)",
}


def prompt(label: str, default: str | None = None, secret: bool = False) -> str:
    prompt_label = f"{label}"
    if default:
        prompt_label += f" [{default}]"
    prompt_label += ": "

    if secret:
        value = getpass.getpass(prompt_label)
    else:
        value = input(prompt_label)

    if not value and default is not None:
        return default
    return value.strip()


def gather_values() -> Dict[str, str]:
    print("\nConfigure SMTP credentials for rxsync email notifications")
    print("(Press Enter to keep defaults for existing .env values)\n")

    existing: Dict[str, str] = {}
    if ENV_FILE.exists():
        with ENV_FILE.open("r", encoding="utf-8") as env:
            for line in env:
                if "=" in line and not line.startswith("#"):
                    key, _, value = line.partition("=")
                    existing[key.strip()] = value.strip()

    collected: Dict[str, str] = {}
    for key, label in ENV_TEMPLATE_KEYS.items():
        default = existing.get(key) or os.getenv(key)
        secret = key == "RXSYNC_SMTP_PASSWORD"
        value = prompt(label, default, secret)
        collected[key] = value

    return collected


def write_env(values: Dict[str, str]) -> None:
    if ENV_FILE.exists():
        backup_path = ENV_FILE.with_suffix(".env.backup")
        ENV_FILE.replace(backup_path)
        print(f"üîÅ Existing .env backed up to {backup_path}")

    with ENV_FILE.open("w", encoding="utf-8") as env:
        env.write("# Generated by setup_email.py\n")
        for key, value in values.items():
            env.write(f"{key}={value}\n")

    print(f"‚úÖ Wrote credentials to {ENV_FILE} (keep this file private)")


def post_instructions() -> None:
    print("\nNext steps:")
    print("  1. Ensure dependencies: pip install python-dotenv")
    print("  2. Run: make sync --notify --dry-run  # verify email delivery")
    print("  3. Add to cron when ready (see README scheduling section)\n")


if __name__ == "__main__":
    try:
        values = gather_values()
        write_env(values)
        post_instructions()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Setup cancelled by user.")
